#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('final:server');
var http = require('http');
let GAME = require('./game');
var X1X1 = 6961; // type of equip just 3x3 grid

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
 var mongoose = require('mongoose');

 var Schema = mongoose.Schema;

var server = http.createServer(app);

var io = require('socket.io')(server);

var Room = mongoose.model('room');

// create a game
tictactoe = new GAME.TICTACTOE();

io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
  socket.on('room', function(msg) {
      socket.join(msg['room']);
      //set value
      player = new GAME.PLAYER(msg['playerId'],X1X1, [msg['playerId']]);
      tictactoe.addPlayer(player);
      //check can play 
      tictactoe.checkCanPlay()
      console.log('room: '+ msg['room']);
  });
  //tictactoe
  socket.on('move', function(msg){
    console.log('move',msg);
    //send to device
    tictactoe.move(tictactoe.getIdPlayer(msg['playerId']),msg['iLoc'], socket, msg);
  });
  socket.on('reset',function(){
    tictactoe.reset();
  })
  socket.on('button_in', function(msg){
    console.log('message',msg);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
